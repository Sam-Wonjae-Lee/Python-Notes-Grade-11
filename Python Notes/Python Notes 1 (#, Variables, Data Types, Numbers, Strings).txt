#: Hashtags are used for comments, and Python will ignore them.
Ex) #This is a comment
     print("Hello, World!")

-> Hello, World!

Data Types:
Text: str
Numeric: int, float
Sequence: list, tuple, range
Boolean: bool
...etc

str: constructs a string from a wide variety of data types, including strings, integer literals and float literals
int: whole numbers
floats: numbers with decimals

print():  display a string literal
print("Hello")

-> Hello

String Position: each letter has a position in a string (starts at 0)
a = "Hello, World!"
print(a[1])

-> e

type(): the type function is used to know the data type of any object
x = 5
print(type(x))

-> <class 'int'>

len(): returns the length of a string
a = "Hello, World!"
print(len(a))

-> 13

Check String: To check if a certain phrase or character is present in a string, we can use the keyword 'in'.
	     To check if a certain phrase or character is NOT present in a string, we can use the keyword 'not in'.
txt = "The best things in life are free!"
print("free" in txt)

-> True

Slicing: return a range of characters
b = "Hello, World!"
print(b[2:5])

- Get the characters from position 2 to position 5 (not included)

-> llo

b = "Hello, World!"
print(b[:5])

-> Hello

b = "Hello, World!"
print(b[2:])

-> llo, World!

b = "Hello, World!"
print(b[-5:-2])

-> orl

lower(): returns the string in lower case
upper(): returns the string in upper case
a = "Hello, World!"
print(a.upper())

-> HELLO, WORLD!

strip(): removes any whitespace from the beginning or the end
replace(): replaces a string with another string
a = "Hello, World!"
print(a.replace("H", "J"))

-> Jello, World!

split(): returns a list where the text between the specified separator becomes the list items.
a = "Hello, World!"
print(a.split(","))

-> ['Hello', ' World!']

Concatenate: combine two strings you can use the + operator. (ONLY STRINGS)

format(): combine strings and numbers (inside of { })
normally strings and numbers cannot be combined in a variable
-> a = "I am" + age

age = 36
txt = "My name is John, and I am {}"
print(txt.format(age))

-> My name is John, and I am 36

\: The backslash character allows you to use double quotes when you normally would not be allowed.
txt = "We are the so-called \"Vikings\" from the north."

String Methods:
capitalize()	Converts the first character to upper case
casefold()	             Converts string into lower case
center()	             Returns a centered string
count()	             Returns the number of times a specified value occurs in a string
encode()	             Returns an encoded version of the string
endswith()	Returns true if the string ends with the specified value
expandtabs()	Sets the tab size of the string
find()	             Searches the string for a specified value and returns the position of where it was found
format()	             Formats specified values in a string
format_map()	Formats specified values in a string
index()	             Searches the string for a specified value and returns the position of where it was found
isalnum()	             Returns True if all characters in the string are alphanumeric
isalpha()	             Returns True if all characters in the string are in the alphabet
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	             Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	             Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	             Returns True if all characters in the string are whitespaces
istitle()	             Returns True if the string follows the rules of a title
isupper()      	Returns True if all characters in the string are upper case
join()	             Joins the elements of an iterable to the end of the string
ljust()	             Returns a left justified version of the string
lower()	             Converts a string into lower case
lstrip()	             Returns a left trim version of the string
maketrans()	Returns a translation table to be used in translations
partition()	Returns a tuple where the string is parted into three parts
replace()	             Returns a string where a specified value is replaced with a specified value
rfind()	             Searches the string for a specified value and returns the last position of where it was found
rindex()	             Searches the string for a specified value and returns the last position of where it was found
rjust()	             Returns a right justified version of the string
rpartition()	Returns a tuple where the string is parted into three parts
rsplit()	             Splits the string at the specified separator, and returns a list
rstrip()	             Returns a right trim version of the string
split()	             Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
startswith()	Returns true if the string starts with the specified value
strip()	             Returns a trimmed version of the string
swapcase()	Swaps cases, lower case becomes upper case and vice versa
title()	             Converts the first character of each word to upper case
translate()	Returns a translated string
upper()	             Converts a string into upper case
zfill()	             Fills the string with a specified number of 0 values at the beginning





